openapi: 3.0.1
info:
  title: Swagger Petstore
  description: 'API to help poc effort on how to handle anyOf and oneOf in spring'
  termsOfService: http://swagger.io/terms/
  contact:
    email: adriancyago@gmail.com
  version: 1.0.0-SNAPSHOT
tags:
  - name: pet
    description: Everything about your Pets
  - name: person
    description: Your profile
paths:
  /persons:
    post:
      tags:
        - person
      operationId: recordPersonProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
      responses:
        '200':
          description: Recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
  /pets:
    post:
      tags:
        - pet
      operationId: recordPets
      requestBody:
        content:
          application/json:
            schema:
              discriminator:
                propertyName: species
              oneOf:
                - $ref: '#/components/schemas/Cat'
                - $ref: '#/components/schemas/Dog'
      responses:
        '200':
          description: Recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecordResponse'
    put:
      tags:
        - pet
      operationId: updatePetDetails
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/PetByAge'
                - $ref: '#/components/schemas/PetByType'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateResponse'
components:
  schemas:
    Person:
      type: object
      properties:
        name:
          type: string
        age:
          type: integer
        pet:
          type: object
          oneOf:
            - $ref: '#/components/schemas/Cat'
            - $ref: '#/components/schemas/Dog'
    Dog:
      type: object
      properties:
        species:
          type: string
          example: dog
        bark:
          type: boolean
        breed:
          type: string
          enum: [ Dingo, Husky, Retriever, Shepherd ]
    Cat:
      type: object
      properties:
        species:
          type: string
          example: cat
        hunts:
          type: boolean
        age:
          type: integer
    RecordResponse:
      type: object
      oneOf:
        - $ref: '#/components/schemas/Cat'
        - $ref: '#/components/schemas/Dog'
    PetByAge:
      type: object
      properties:
        age:
          type: integer
        nickname:
          type: string
      required:
        - age
    PetByType:
      type: object
      properties:
        pet_type:
          type: string
          enum: [ Cat, Dog ]
        hunts:
          type: boolean
      required:
        - pet_type
    UpdateResponse:
      type: object
      properties:
        pet_type:
          type: string
          enum: [ Cat, Dog ]